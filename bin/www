#!/usr/bin/env node

/**
 * Module dependencies.
 */

var App = require('../app');
var Socket = require('../libs/socket');
var debug = require('debug')('etherseach-ui:server');
var http = require('http');
var BlockchainApi = require('../libs/blockchainApi');

/**
 * Get port from environment and store in Express.
 */
var PORT = process.env.PORT;
var SERVER_IP = process.env.SERVER_IP;
var API_URL = process.env.API_URL;

if (!PORT) {
  throw ("Environment variable PORT is undefined")
}
if (!SERVER_IP) {
  throw ("Environment variable SERVER_IP is undefined")
}
if (!API_URL) {
  throw ("Environment variable API_URL is undefined")
}

var blockchainApi = new BlockchainApi(API_URL);
var serverUrl = `http://${SERVER_IP}:${PORT}`
var app = new App(serverUrl, blockchainApi).getApp()

app.set('port', PORT);

blockchainApi.get10LatestBlock((err, blocks) => {
  app.blocks = blocks;
  blockchainApi.getPendingTx(10, (err, txs) => {
    app.txs = txs;
    
    // Create HTTP server.
    var server = http.createServer(app);

    // Listen on provided PORT, on all network interfaces.
    server.listen(PORT);
    server.on('error', onError);
    server.on('listening', onListening);

    // Create socket sever
    var apiUrl = API_URL
    var socket = new Socket(apiUrl, server);
    socket.start()

    // Event listener for HTTP server "listening" event.
    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }

    // Event listener for HTTP server "error" event.
    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }
  })
})
